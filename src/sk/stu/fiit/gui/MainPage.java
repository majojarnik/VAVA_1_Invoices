/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import sk.stu.fiit.controllers.InvoiceControler;
import sk.stu.fiit.data.Data;
import sk.stu.fiit.exceptions.BlankFields;
import sk.stu.fiit.model.Commodity;
import sk.stu.fiit.model.Customer;
import sk.stu.fiit.model.Invoice;

/**
 *
 * @author jarni
 */
public class MainPage extends javax.swing.JFrame implements TablesCommodity{

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlAddInvoice = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        lblCustomer = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        btnAddCustomer = new javax.swing.JButton();
        lblCommodity = new javax.swing.JLabel();
        lblInfoPrice = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        btnSaveInvoice = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCommInvoice = new javax.swing.JTable();
        btnChooseCom = new javax.swing.JButton();
        btnRemComm = new javax.swing.JButton();
        pnlListCommodity = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCommodities = new javax.swing.JTable();
        btnAddComm = new javax.swing.JButton();
        btnEditComm = new javax.swing.JButton();
        pnlListCustomer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCustomers = new javax.swing.JTable();
        btnAddCus = new javax.swing.JButton();
        btnEditCus = new javax.swing.JButton();
        pnlListInvoice = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableInvoices = new javax.swing.JTable();
        btnShowInvDetail = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(500, 470));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(500, 470));

        pnlAddInvoice.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHeading.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblHeading.setText("Vystavenie faktúry");
        pnlAddInvoice.add(lblHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, -1, -1));

        lblCustomer.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblCustomer.setText("Zákazník");
        pnlAddInvoice.add(lblCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        cmbCustomer.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cmbCustomerPopupMenuWillBecomeVisible(evt);
            }
        });
        pnlAddInvoice.add(cmbCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 430, 30));

        btnAddCustomer.setText("Pridať nového zákazníka");
        btnAddCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddCustomerMouseClicked(evt);
            }
        });
        pnlAddInvoice.add(btnAddCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 180, -1));

        lblCommodity.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblCommodity.setText("Zoznam tovarov");
        pnlAddInvoice.add(lblCommodity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        lblInfoPrice.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblInfoPrice.setText("Celková cena:");
        pnlAddInvoice.add(lblInfoPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, -1, 20));

        lblPrice.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblPrice.setText("0 EUR");
        pnlAddInvoice.add(lblPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, -1, -1));

        btnSaveInvoice.setText("Vystaviť faktúru");
        btnSaveInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveInvoiceMouseClicked(evt);
            }
        });
        pnlAddInvoice.add(btnSaveInvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, -1, -1));

        tableCommInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Názov", "Opis", "Cena", "Množstvo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        jScrollPane3.setViewportView(tableCommInvoice);
        tableCommInvoice.getAccessibleContext().setAccessibleName("");
        tableCommInvoice.getAccessibleContext().setAccessibleDescription("");

        pnlAddInvoice.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 430, 120));

        btnChooseCom.setText("Vybrať tovar");
        btnChooseCom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChooseComMouseClicked(evt);
            }
        });
        pnlAddInvoice.add(btnChooseCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        btnRemComm.setText("Odobrať tovar");
        btnRemComm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemCommMouseClicked(evt);
            }
        });
        pnlAddInvoice.add(btnRemComm, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 300, -1, -1));

        jTabbedPane1.addTab("Vystavenie faktúry", pnlAddInvoice);

        pnlListCommodity.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlListCommodityComponentShown(evt);
            }
        });
        pnlListCommodity.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        List<String> columns = new ArrayList<String>();
        List<String[]> values = new ArrayList<String[]>();

        for (Commodity com: Data.getAllCommodities()){
            values.add(new String[] {com.getName(), com.getDesc(), String.valueOf(com.getPrice() / 100.0)});
        }

        columns.add("Názov");
        columns.add("Opis tovaru");
        columns.add("Cena");

        TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
        tableCommodities.setModel(tableModel);
        jScrollPane2.setViewportView(tableCommodities);

        pnlListCommodity.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 440));

        btnAddComm.setText("Pridať tovar");
        btnAddComm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddCommMouseClicked(evt);
            }
        });
        pnlListCommodity.add(btnAddComm, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, -1, -1));

        btnEditComm.setText("Upraviť tovar");
        btnEditComm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditCommMouseClicked(evt);
            }
        });
        pnlListCommodity.add(btnEditComm, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, -1, -1));

        jTabbedPane1.addTab("Zoznam tovarov", pnlListCommodity);

        pnlListCustomer.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlListCustomerComponentShown(evt);
            }
        });
        pnlListCustomer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableCustomers.setModel(initializeCustomerTableModel());
        jScrollPane1.setViewportView(tableCustomers);

        pnlListCustomer.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 440));

        btnAddCus.setText("Pridať zákazníka");
        btnAddCus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddCusMouseClicked(evt);
            }
        });
        pnlListCustomer.add(btnAddCus, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, -1, -1));

        btnEditCus.setText("Upraviť zákazníka");
        btnEditCus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditCusMouseClicked(evt);
            }
        });
        pnlListCustomer.add(btnEditCus, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 440, -1, -1));

        jTabbedPane1.addTab("Zoznam zákazníkov", pnlListCustomer);

        pnlListInvoice.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableInvoices.setModel(initializeInvoicesTableModel());
        jScrollPane4.setViewportView(tableInvoices);

        pnlListInvoice.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 440));

        btnShowInvDetail.setText("Pozri detail faktúry");
        btnShowInvDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnShowInvDetailMouseClicked(evt);
            }
        });
        pnlListInvoice.add(btnShowInvDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, -1, -1));

        jTabbedPane1.addTab("Zoznam faktúr", pnlListInvoice);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public List<Commodity> getInvoiceComs() {
        return InvoiceComs;
    }

    private List<Commodity> InvoiceComs = new ArrayList<>();
            
    private TableModel initializeCustomerTableModel(){
        List<String> columns = new ArrayList<String>();
        List<String[]> values = new ArrayList<String[]>();

        for (Customer cus: Data.getAllCustomers()){
            values.add(new String[] {cus.getName(), cus.getStreet(), cus.getCity(), cus.getPsc()});
        }

        columns.add("Meno a priezvisko");
        columns.add("Ulica, č.d.");
        columns.add("Mesto");
        columns.add("PSČ");

        TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
        return tableModel;
    }
    
    public void initializeCustomerTable(){
        tableCustomers.setModel(initializeCustomerTableModel());
    }
    
    private TableModel initializeCommoditiesTableModel(List<Commodity> data){
        List<String> columns = new ArrayList<String>();
        List<String[]> values = new ArrayList<String[]>();

        for (Commodity com: data){
            values.add(new String[] {com.getName(), com.getDesc(), String.valueOf(com.getPrice() / 100.0)});
        }

        columns.add("Názov");
        columns.add("Opis tovaru");
        columns.add("Cena");

        TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
        return tableModel;
    }
    
    @Override
    public void initializeCommodityTable() {
        tableCommodities.setModel(initializeCommoditiesTableModel(Data.getAllCommodities())); 
    }

    
    private TableModel initializeInvoicesTableModel(){
        List<String> columns = new ArrayList<String>();
        List<String[]> values = new ArrayList<String[]>();

        for (Invoice inv: Data.getAllInvoices()){
            double price = 0;
            for (Commodity com: inv.getCommodities()){
                price += com.getPrice()/100.0 * com.getNumber();
            }
            values.add(new String[] {String.valueOf(inv.getDate()), inv.getCustomer().getName(), String.format("%.2f EUR", price)});
        }

        columns.add("Dátum");
        columns.add("Zákazník");
        columns.add("Cena");

        TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
        return tableModel;
    }
    
    public void initializeInvoicesTable(){
        tableInvoices.setModel(initializeInvoicesTableModel());;
    }
    
    public void initializeCommoditiesTableInvoice(){
        List<String> columns = new ArrayList<String>();
        List<String[]> values = new ArrayList<String[]>();

        double price = 0;
        
        for (Commodity com: InvoiceComs){
            values.add(new String[] {com.getName(), com.getDesc(), String.valueOf(com.getPrice() / 100.0), String.valueOf(com.getNumber())});
            price += com.getPrice()/100.0 * com.getNumber();
        }

        columns.add("Názov");
        columns.add("Opis tovaru");
        columns.add("Cena");
        columns.add("Množstvo");

        TableModel tableModel = new DefaultTableModel(values.toArray(new Object[][] {}), columns.toArray());
        //return tableModel;
        tableCommInvoice.setModel(tableModel);
        lblPrice.setText(String.format("%.2f EUR", price));
        
    }
    
    private void cmbCustomerPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbCustomerPopupMenuWillBecomeVisible
        List<String> names = new ArrayList<String>();
        for (Customer cus: Data.getAllCustomers()){
            names.add(cus.getName());
        }
        
        String[] array = names.toArray(new String[0]);
        
        cmbCustomer.setModel(new DefaultComboBoxModel(array));
    }//GEN-LAST:event_cmbCustomerPopupMenuWillBecomeVisible

    private void pnlListCommodityComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlListCommodityComponentShown
        tableCommodities.setModel(initializeCommoditiesTableModel(Data.getAllCommodities())); 
    }//GEN-LAST:event_pnlListCommodityComponentShown

    private void pnlListCustomerComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlListCustomerComponentShown
        tableCustomers.setModel(initializeCustomerTableModel());
    }//GEN-LAST:event_pnlListCustomerComponentShown

    private void btnChooseComMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChooseComMouseClicked
        CommodityChooser zoznam = new CommodityChooser();
        zoznam.initializeParent(this);
        zoznam.setVisible(true);
    }//GEN-LAST:event_btnChooseComMouseClicked

    private void btnAddCommMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddCommMouseClicked
        AddCommodity comm = new AddCommodity();
        comm.setVisible(true);
        comm.initializeAddCommodity(this);
    }//GEN-LAST:event_btnAddCommMouseClicked

    private void btnAddCusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddCusMouseClicked
        AddCustomer customer = new AddCustomer();
        customer.setVisible(true);
        customer.initializeParent(this);
    }//GEN-LAST:event_btnAddCusMouseClicked

    InvoiceControler invCon = new InvoiceControler();
    
    private void btnSaveInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveInvoiceMouseClicked
        int cus = cmbCustomer.getSelectedIndex();        
        
        try {
            invCon.addInvoice(cus, InvoiceComs);
            InvoiceComs.clear();
            initializeCommoditiesTableInvoice();
            cmbCustomer.setSelectedIndex(-1);
            JOptionPane.showMessageDialog(rootPane, "Faktúra bola úspešne vytvorená. Môžete si ju pozrieť v zozname faktúr.", "Vytvorená faktúra", JOptionPane.INFORMATION_MESSAGE);
            initializeInvoicesTable();
            
        } catch (BlankFields ex) {
            JOptionPane.showMessageDialog(rootPane, "Faktúra musí obsahovať zákazníka a aspoň 1 tovar", "Nevyplnene polia", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveInvoiceMouseClicked

    private void btnEditCusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditCusMouseClicked
        int cus = tableCustomers.getSelectedRow();
        
        if (Boolean.logicalAnd(cus > -1, cus < Data.getAllCustomers().size())){
            AddCustomer customer = new AddCustomer();
            customer.initializeEdit(Data.getAllCustomers().get(cus));
            customer.setVisible(true);
            customer.initializeParent(this);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Vyberte zákazníka, ktorého si prajete upraviť.", "Nevybraný zákazník", JOptionPane.ERROR_MESSAGE);
            

    }//GEN-LAST:event_btnEditCusMouseClicked

    private void btnEditCommMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditCommMouseClicked
        int com = tableCommodities.getSelectedRow();
        
        if (Boolean.logicalAnd(com > -1, com < Data.getAllCommodities().size())){
            AddCommodity commodity = new AddCommodity();
            commodity.initializeEdit(Data.getAllCommodities().get(com));
            commodity.setVisible(true);
            commodity.initializeAddCommodity(this);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Vyberte tovar, ktorý si prajete upraviť.", "Nevybraný tovar", JOptionPane.ERROR_MESSAGE);
            
    }//GEN-LAST:event_btnEditCommMouseClicked

    private void btnAddCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddCustomerMouseClicked
        AddCustomer customer = new AddCustomer();
        customer.setVisible(true);
        customer.initializeParent(this);
    }//GEN-LAST:event_btnAddCustomerMouseClicked

    private void btnShowInvDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShowInvDetailMouseClicked
        int inv = tableInvoices.getSelectedRow();
        
        if (Boolean.logicalAnd(inv > -1, inv < Data.getAllInvoices().size())){
            ShowInvoice showInv = new ShowInvoice();
            showInv.initializeShowInvoice(Data.getAllInvoices().get(inv));
            showInv.setVisible(true);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Vyberte faktúru, ktorú si prajete zobraziť.", "Nevybraná faktúra", JOptionPane.ERROR_MESSAGE);
     
    }//GEN-LAST:event_btnShowInvDetailMouseClicked

    private void btnRemCommMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemCommMouseClicked
        int com = tableCommInvoice.getSelectedRow();
        
        if (Boolean.logicalAnd(com > -1, com < InvoiceComs.size())){
            InvoiceComs.remove(com);
            initializeCommoditiesTableInvoice();
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Vyberte tovar, ktorý sa má odobrať.", "Nevybraný tovar", JOptionPane.ERROR_MESSAGE);
       
    }//GEN-LAST:event_btnRemCommMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddComm;
    private javax.swing.JButton btnAddCus;
    private javax.swing.JButton btnAddCustomer;
    private javax.swing.JButton btnChooseCom;
    private javax.swing.JButton btnEditComm;
    private javax.swing.JButton btnEditCus;
    private javax.swing.JButton btnRemComm;
    private javax.swing.JButton btnSaveInvoice;
    private javax.swing.JButton btnShowInvDetail;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCommodity;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblInfoPrice;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JPanel pnlAddInvoice;
    private javax.swing.JPanel pnlListCommodity;
    private javax.swing.JPanel pnlListCustomer;
    private javax.swing.JPanel pnlListInvoice;
    private javax.swing.JTable tableCommInvoice;
    private javax.swing.JTable tableCommodities;
    private javax.swing.JTable tableCustomers;
    private javax.swing.JTable tableInvoices;
    // End of variables declaration//GEN-END:variables

    
}
